import httpRequest from '../utils/httpRequests';

export const servicosService = {
  // Buscar todos os cadastros de servi√ßos do Protheus (OBRIGAT√ìRIO: Centro de custo)
  async buscarServicos(centroCusto) {
    if (!centroCusto) {
      throw new Error('Centro de custo √© obrigat√≥rio para buscar servi√ßos');
    }

    try {
      const response = await httpRequest(`/consultaServicosProtheus?centroCusto=${centroCusto}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_API_TOKEN}`,
          'X-Requested-With': 'XMLHttpRequest'
        },
      });
      
      if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.status && result.data) {
        return result.data;
      } else {
        throw new Error(result.messsage || 'Nenhum dado dispon√≠vel');
      }
    } catch (error) {
      console.error('Erro no servicosService.buscarServicos:', error);
      throw error;
    }
  },

  // Buscar servi√ßos com filtros (OBRIGAT√ìRIO: Centro de custo)
  async buscarServicosComFiltros(filtros = {}) {
    if (!filtros.centroCusto) {
      throw new Error('Centro de custo √© obrigat√≥rio nos filtros');
    }

    try {
      let endpoint = '/consultaServicosProtheus';
      const queryParams = [];

      // Centro de custo √© sempre obrigat√≥rio
      queryParams.push(`centroCusto=${filtros.centroCusto}`);
      
      // Se tiver idServico, adicionar como query param
      if (filtros.idServico) {
        queryParams.push(`idServico=${filtros.idServico}`);
      }

      endpoint += `?${queryParams.join('&')}`;

      const response = await httpRequest(endpoint, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_API_TOKEN}`,
          'X-Requested-With': 'XMLHttpRequest'
        },
      });
      
      if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.status && result.data) {
        return result.data;
      } else {
        throw new Error(result.messsage || 'Nenhum dado dispon√≠vel');
      }
    } catch (error) {
      console.error('Erro no servicosService.buscarServicosComFiltros:', error);
      throw error;
    }
  },

  async buscarServicoPorId(idServico, centroCusto) {
    if (!idServico || !centroCusto) {
      throw new Error('ID do servi√ßo e centro de custo s√£o obrigat√≥rios');
    }

    try {
      const response = await httpRequest(`/consultaServicosProtheus?centroCusto=${centroCusto}&idServico=${idServico}`, {
        method: 'GET',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${import.meta.env.VITE_API_TOKEN}`,
          'X-Requested-With': 'XMLHttpRequest'
        },
      });
      
      if (!response.ok) {
        throw new Error(`Erro HTTP: ${response.status}`);
      }
      
      const result = await response.json();
      
      if (result.status && result.data && result.data.length > 0) {
        return result.data[0]; // Retorna o primeiro (e √∫nico) resultado
      } else {
        throw new Error(result.messsage || 'Servi√ßo n√£o encontrado');
      }
    } catch (error) {
      console.error('Erro no servicosService.buscarServicoPorId:', error);
      throw error;
    }
  },

  // Exportar dados para download
  async exportarServicos(formato = 'csv', filtros = {}) {
    try {
      // Buscar dados primeiro
      const servicos = await this.buscarServicosComFiltros(filtros);
      
      if (!servicos || servicos.length === 0) {
        throw new Error('Nenhum dado dispon√≠vel para exporta√ß√£o');
      }

      // Se for CSV, criar o conte√∫do
      if (formato === 'csv') {
        const csvContent = [
          ['ID Servi√ßo', 'Sigla UP', 'Descri√ß√£o UP', 'C√≥digo Servi√ßo', 'Descri√ß√£o Servi√ßo', 'Centro Custo', 'Valor Pontos', 'Valor Grupo', 'Grupo Instala√ß√£o', 'C√≥digo Unidade', 'Descri√ß√£o Unidade'],
          ...servicos.map(servico => [
            servico.idServico?.trim() || '',
            servico.siglaUp?.trim() || '',
            servico.descricaoUp?.trim() || '',
            servico.codServico?.trim() || '',
            servico.descricaoServico?.trim() || '',
            servico.centroCusto?.trim() || '',
            servico.valorPontos || 0,
            servico.valorGrupo || 0,
            servico.grupoInstalacao?.trim() || '',
            servico.codUnidade?.trim() || '',
            servico.descricaoUnidade?.trim() || ''
          ])
        ].map(row => row.join(',')).join('\n');

        const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
        return blob;
      }
      
      return servicos;
    } catch (error) {
      console.error('Erro no servicosService.exportarServicos:', error);
      throw error;
    }
  }
};

export default servicosService;

// Fun√ß√£o para consultar servi√ßos do Protheus (OBRIGAT√ìRIO: Centro de custo)
export const consultarServicosProtheus = async (params = {}) => {
  // VALIDA√á√ÉO OBRIGAT√ìRIA: Centro de custo deve estar presente
  if (!params.centroCusto) {
    throw new Error('Centro de custo √© obrigat√≥rio para consultar servi√ßos do Protheus');
  }

  try {
    let endpoint = '/consultaServicosProtheus';
    const queryParams = [];
    
    // Adicionar par√¢metro centroCusto (OBRIGAT√ìRIO)
    queryParams.push(`centroCusto=${params.centroCusto}`);
    
    // Adicionar par√¢metro idServico se fornecido
    if (params.idServico) {
      queryParams.push(`idServico=${params.idServico}`);
    }
    
    // Montar a URL com os par√¢metros
    endpoint += `?${queryParams.join('&')}`;

    console.log(`üîÑ Consultando servi√ßos Protheus para centro de custo: ${params.centroCusto}`);

    const response = await httpRequest(endpoint, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${import.meta.env.VITE_API_TOKEN}`,
        'X-Requested-With': 'XMLHttpRequest'
      }
    });

    if (!response.ok) {
      throw new Error(`Erro na requisi√ß√£o: ${response.status}`);
    }

    const result = await response.json();
    
    if (result.status && result.data) {
      console.log(`‚úÖ Servi√ßos carregados para centro de custo ${params.centroCusto}: ${result.data.length} itens`);
      return result.data;
    } else {
      throw new Error(result.messsage || 'Nenhum dado dispon√≠vel');
    }
  } catch (error) {
    console.error(`‚ùå Erro ao consultar servi√ßos do Protheus para centro de custo ${params.centroCusto}:`, error);
    throw error;
  }
};
